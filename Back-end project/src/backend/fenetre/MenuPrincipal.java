/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package backend.fenetre;

import com.mysql.cj.jdbc.exceptions.CommunicationsException;
import java.awt.CardLayout;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Aro
 */
public class MenuPrincipal extends javax.swing.JFrame {

    private Connection connexion;

    //Declaration des composants IHM
    private PanelConnexion panelConnexion;
    private CardLayout cardLayout;

    /**
     * Creates new form Main
     */
    public MenuPrincipal() {
        initComponents();
        initComponentPerso();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSeparator1 = new javax.swing.JSeparator();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        panelUtilisateurs = new javax.swing.JPanel();
        panelUtilisateur = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CBUtilisateurs = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        BBan = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rechercheUtilisateur = new javax.swing.JTextField();
        panelCreateEvent = new javax.swing.JPanel();
        panelPlats = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        CBPlats = new javax.swing.JComboBox<>();
        jButton10 = new javax.swing.JButton();
        BValider = new javax.swing.JButton();
        BSupprimer = new javax.swing.JButton();
        ChBValide = new javax.swing.JCheckBox();
        ChBSoumis = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        recherchePlat = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trouve Ton Plat - Admin");

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jButton1.setText("Gérer les utilisateurs");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Gérer les plats");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Créer un évènement");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Quitter");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Configurer connexion");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel2.setText("Modération");

        jLabel4.setText("Evenements");

        jButton8.setText("Gérer les évènements");
        jButton8.setEnabled(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(37, 37, 37)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel3.setLayout(new java.awt.CardLayout());

        panelUtilisateurs.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout panelUtilisateurLayout = new javax.swing.GroupLayout(panelUtilisateur);
        panelUtilisateur.setLayout(panelUtilisateurLayout);
        panelUtilisateurLayout.setHorizontalGroup(
            panelUtilisateurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 939, Short.MAX_VALUE)
        );
        panelUtilisateurLayout.setVerticalGroup(
            panelUtilisateurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 426, Short.MAX_VALUE)
        );

        panelUtilisateurs.add(panelUtilisateur, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Utilisateurs :");

        CBUtilisateurs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBUtilisateurs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBUtilisateursItemStateChanged(evt);
            }
        });
        CBUtilisateurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBUtilisateursActionPerformed(evt);
            }
        });

        jButton5.setText("Rechercher");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        BBan.setText("Bannir/Debannir");
        BBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBanActionPerformed(evt);
            }
        });

        jLabel3.setText("Rechercher un utilisateur :");

        rechercheUtilisateur.setForeground(new java.awt.Color(102, 102, 102));
        rechercheUtilisateur.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rechercheUtilisateurFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rechercheUtilisateurFocusLost(evt);
            }
        });
        rechercheUtilisateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercheUtilisateurActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBUtilisateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rechercheUtilisateur, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                        .addComponent(BBan, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BBan)
                    .addComponent(jButton5)
                    .addComponent(jLabel3)
                    .addComponent(rechercheUtilisateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(CBUtilisateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelUtilisateurs.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jPanel3.add(panelUtilisateurs, "card2");

        panelCreateEvent.setBackground(new java.awt.Color(255, 153, 153));

        javax.swing.GroupLayout panelCreateEventLayout = new javax.swing.GroupLayout(panelCreateEvent);
        panelCreateEvent.setLayout(panelCreateEventLayout);
        panelCreateEventLayout.setHorizontalGroup(
            panelCreateEventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 939, Short.MAX_VALUE)
        );
        panelCreateEventLayout.setVerticalGroup(
            panelCreateEventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );

        jPanel3.add(panelCreateEvent, "card3");

        panelPlats.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 939, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );

        panelPlats.add(jPanel4, java.awt.BorderLayout.CENTER);

        jLabel16.setText("Plats :");

        CBPlats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CBPlats.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBPlatsItemStateChanged(evt);
            }
        });
        CBPlats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBPlatsActionPerformed(evt);
            }
        });

        jButton10.setText("Rechercher");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        BValider.setText("Valider");
        BValider.setEnabled(false);
        BValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BValiderActionPerformed(evt);
            }
        });

        BSupprimer.setText("Supprimer");
        BSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSupprimerActionPerformed(evt);
            }
        });

        ChBValide.setSelected(true);
        ChBValide.setText("Plats Validés ");
        ChBValide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChBValideActionPerformed(evt);
            }
        });

        ChBSoumis.setSelected(true);
        ChBSoumis.setText("Plats Soumis");
        ChBSoumis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChBSoumisActionPerformed(evt);
            }
        });

        jLabel13.setText("Rechercher un plat :");

        recherchePlat.setForeground(new java.awt.Color(102, 102, 102));
        recherchePlat.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                recherchePlatFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                recherchePlatFocusLost(evt);
            }
        });
        recherchePlat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recherchePlatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBPlats, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(recherchePlat, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                .addComponent(BSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BValider, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(ChBValide)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ChBSoumis)))
                        .addGap(12, 12, 12))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BValider)
                    .addComponent(BSupprimer)
                    .addComponent(jLabel13)
                    .addComponent(recherchePlat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChBValide)
                    .addComponent(ChBSoumis))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CBPlats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        panelPlats.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel3.add(panelPlats, "card2");

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);
        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CBUtilisateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBUtilisateursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBUtilisateursActionPerformed

    private void BBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBanActionPerformed
        String item = (String) CBUtilisateurs.getSelectedItem();
        String idUtilisateur = item.split(" ")[0];
        if (BBan.getText().equals("Bannir")) {
            bannir(idUtilisateur);
        } else {
            debannir(idUtilisateur);
        }
        checkBan(idUtilisateur);

    }//GEN-LAST:event_BBanActionPerformed

    private void CBPlatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBPlatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBPlatsActionPerformed

    private void rechercheUtilisateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercheUtilisateurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rechercheUtilisateurActionPerformed

    private void rechercheUtilisateurFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rechercheUtilisateurFocusGained

    }//GEN-LAST:event_rechercheUtilisateurFocusGained

    private void rechercheUtilisateurFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rechercheUtilisateurFocusLost

    }//GEN-LAST:event_rechercheUtilisateurFocusLost

    private void CBUtilisateursItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBUtilisateursItemStateChanged
        String item = (String) CBUtilisateurs.getSelectedItem();
        String idUtilisateur = item.split(" ")[0];
        PanelUtilisateur temp = afficherUtilisateur(idUtilisateur);

        checkBan(idUtilisateur);

        panelUtilisateurs.remove(0);
        panelUtilisateurs.add(temp, 0);
        panelUtilisateurs.revalidate();
    }//GEN-LAST:event_CBUtilisateursItemStateChanged

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        CBUtilisateurs.setModel(lister("idUtilisateur", "pseudoUtilisateur", "Utilisateur", "WHERE pseudoUtilisateur LIKE '%" + rechercheUtilisateur.getText() + "%'"));
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String filtre = " ";
        System.out.println(ChBValide.isSelected());
        System.out.println(ChBSoumis.isSelected());
        if (ChBValide.isSelected() || ChBSoumis.isSelected()) {
            filtre += " AND ";
            if (ChBValide.isSelected()) {
                filtre += "Ajoutee = '1'";
            }
            if (ChBValide.isSelected() && ChBSoumis.isSelected()) {
                filtre += " OR ";
            }
            if (ChBSoumis.isSelected()) {
                filtre += "Ajoutee = '0'";
            }
            System.out.println(filtre);
        }
        CBPlats.setModel(lister("idPlat", "Nom", "Plat", "WHERE Nom LIKE '%" + recherchePlat.getText() + "%'" + filtre));
    }//GEN-LAST:event_jButton10ActionPerformed

    private void ChBValideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChBValideActionPerformed

    }//GEN-LAST:event_ChBValideActionPerformed

    private void ChBSoumisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChBSoumisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChBSoumisActionPerformed

    private void BSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSupprimerActionPerformed
        String item = (String) CBPlats.getSelectedItem();
        String idPlat = item.split(" ")[0];
        
        supprimerPlat(idPlat);
    }//GEN-LAST:event_BSupprimerActionPerformed

    private void BValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BValiderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BValiderActionPerformed

    private void recherchePlatFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_recherchePlatFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_recherchePlatFocusGained

    private void recherchePlatFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_recherchePlatFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_recherchePlatFocusLost

    private void recherchePlatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recherchePlatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recherchePlatActionPerformed

    private void CBPlatsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBPlatsItemStateChanged
        String item = (String) CBPlats.getSelectedItem();
        String idPlat = item.split(" ")[0];

        BValider.setEnabled(estValide(idPlat));
        BSupprimer.setEnabled(rootPaneCheckingEnabled);

        PanelPlat temp = afficherPlat(idPlat);
        panelPlats.remove(0);
        panelPlats.add(temp, 0);
        panelPlats.revalidate();
    }//GEN-LAST:event_CBPlatsItemStateChanged

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        cardLayout.show(jPanel3, "C");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        cardLayout.show(jPanel3, "E");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cardLayout.show(jPanel3, "P");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cardLayout.show(jPanel3, "U");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MenuPrincipal mp = new MenuPrincipal();
                //mp.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BBan;
    private javax.swing.JButton BSupprimer;
    private javax.swing.JButton BValider;
    private javax.swing.JComboBox<String> CBPlats;
    private javax.swing.JComboBox<String> CBUtilisateurs;
    private javax.swing.JCheckBox ChBSoumis;
    private javax.swing.JCheckBox ChBValide;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panelCreateEvent;
    private javax.swing.JPanel panelPlats;
    private javax.swing.JPanel panelUtilisateur;
    private javax.swing.JPanel panelUtilisateurs;
    private javax.swing.JTextField recherchePlat;
    private javax.swing.JTextField rechercheUtilisateur;
    // End of variables declaration//GEN-END:variables

    private void initComponentPerso() {

        cardLayout = new CardLayout();
        panelConnexion = new PanelConnexion();
        panelCreateEvent = new PanelCreationEvenement(this);
        
        jPanel3.setLayout(cardLayout);
        jPanel3.add(panelUtilisateurs, "U");
        jPanel3.add(panelPlats, "P");
        jPanel3.add(panelCreateEvent, "E");
        jPanel3.add(panelConnexion, "C");

        CBUtilisateurs.setModel(lister("idUtilisateur", "pseudoUtilisateur", "Utilisateur", "WHERE pseudoUtilisateur LIKE '%" + rechercheUtilisateur.getText() + "%'"));
        CBPlats.setModel(lister("idPlat", "nom", "Plat", ""));

    }

    private PanelUtilisateur afficherUtilisateur(String idUtilisateur) {
        String[] platsSoumis = new String[1], platsFavoris = new String[1];
        String description = new String(), pseudo = new String();
        int cpt = 0;

        Statement nomOrdre = connect();

        ResultSet resultat;
        try {
            //Vas chercher les informations de l'utilisateur
            resultat = nomOrdre.executeQuery("SELECT pseudoUtilisateur, description FROM Utilisateur WHERE idUtilisateur = '" + idUtilisateur + "'");
            while (resultat.next()) {
                pseudo = resultat.getString("pseudoUtilisateur");
                description = resultat.getString("description");
            }

            //Vas chercher les plats favoris de l'utilisateur
            resultat = nomOrdre.executeQuery("SELECT COUNT(idPlat) FROM Favoris WHERE IdUtilisateur = " + idUtilisateur);
            while (resultat.next()) {
                platsFavoris = new String[resultat.getInt(1)];
            }

            resultat = nomOrdre.executeQuery("SELECT p.IdPlat, Nom FROM Plat p, Favoris f WHERE f.IdUtilisateur = " + idUtilisateur + " AND p.IdPlat = f.IdPlat ORDER BY p.IdPlat");

            cpt = 0;
            while (resultat.next()) {
                platsFavoris[cpt] = resultat.getString("IdPlat") + " - " + resultat.getString("Nom");
                cpt++;
            }

            //Vas chercher les plats soumis par l'utilisateur
            resultat = nomOrdre.executeQuery("SELECT COUNT(idPlat) FROM Plat WHERE IdUtilisateur = " + idUtilisateur);
            while (resultat.next()) {
                platsSoumis = new String[resultat.getInt(1)];
            }

            resultat = nomOrdre.executeQuery("SELECT IdPlat, Nom FROM Plat WHERE IdUtilisateur = " + idUtilisateur + " ORDER BY IdPlat");

            cpt = 0;
            while (resultat.next()) {
                platsSoumis[cpt] = resultat.getString("IdPlat") + " - " + resultat.getString("Nom");
                cpt++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        return new PanelUtilisateur(pseudo, description, platsSoumis, platsFavoris);
    }

    private PanelPlat afficherPlat(String idPlat) {
        String idUtilisateur = new String(), utilisateur = new String(), nomPlat = new String(), note = new String(), description = new String(), recette = new String(), idCategorie = new String(), categorie = new String();
        String[] ingredients = new String[1], images = new String[1];
        int cpt = 0;
        Statement nomOrdre = connect();
        try {
            //Vas chercher les informations du plats
            ResultSet resultat = nomOrdre.executeQuery("SELECT * FROM Plat WHERE idPlat = '" + idPlat + "'");
            while (resultat.next()) {
                idUtilisateur = resultat.getString("IdUtilisateur");
                idCategorie = resultat.getString("IdCategorie");
                nomPlat = resultat.getString("Nom");
                description = resultat.getString("Description");
                note = resultat.getString("Note");
                recette = resultat.getString("recette");
            }

            //Vas chercher les ingrédients du plat
            resultat = nomOrdre.executeQuery("SELECT COUNT(idIngredient) FROM Composer WHERE idPlat = '" + idPlat + "'");
            while (resultat.next()) {
                ingredients = new String[resultat.getInt(1)];
            }

            resultat = nomOrdre.executeQuery("SELECT i.IdIngredient, Nom FROM Ingredient i, Composer c WHERE c.IdPlat = " + idPlat + " AND c.IdIngredient = i.IdIngredient ORDER BY i.IdIngredient");

            cpt = 0;
            while (resultat.next()) {
                ingredients[cpt] = resultat.getString("IdIngredient") + " - " + resultat.getString("Nom");
                cpt++;
            }

            //Vas chercher l'utilisateur ayant soumis le plat
            resultat = nomOrdre.executeQuery("SELECT pseudoUtilisateur FROM Utilisateur WHERE idUtilisateur = '" + idUtilisateur + "'");
            while (resultat.next()) {
                utilisateur = resultat.getString("pseudoUtilisateur");
            }

            //Vas chercher la categorie du plat
            resultat = nomOrdre.executeQuery("SELECT Nom FROM Categorie WHERE IdCategorie = '" + idCategorie + "'");
            while (resultat.next()) {
                categorie = resultat.getString("Nom");
            }

        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new PanelPlat(utilisateur, nomPlat, idPlat, categorie, note, ingredients, description, recette, images);
    }

    public DefaultComboBoxModel lister(String nomId, String nom, String table, String where) {
        String[] liste = new String[1];
        int nb = 0;

        try {
            Statement nomOrdre = connect();

            ResultSet resultat = nomOrdre.executeQuery("SELECT COUNT(" + nomId + ") FROM " + table + " " + where);
            while (resultat.next()) {
                nb = resultat.getInt(1);
            }
            liste = new String[nb];
            resultat = nomOrdre.executeQuery("SELECT " + nomId + ", " + nom + " FROM " + table + " " + where + "ORDER BY " + nomId);
            int cpt = 0;
            while (resultat.next()) {
                liste[cpt] = resultat.getString(nomId) + " - " + resultat.getString(nom);
                cpt++;
            }

            resultat.close();
            nomOrdre.close();

        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new DefaultComboBoxModel(liste);
    }

    /**
     * Ne sert à rien
     *
     * @param sql
     */
    public void requeteLocalhost(String requete) {
        // TODO code application logic here

        try {
            // TODO code application logic here
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connexion = DriverManager.getConnection("jdbc:mysql://" + this.panelConnexion.getBDHost() + "/" + this.panelConnexion.getBDDBName(), this.panelConnexion.getBDUser(), this.panelConnexion.getBDPWD());
            Statement nomOrdre = connexion.createStatement();
            ResultSet resultat = nomOrdre.executeQuery("SELECT nom FROM Plat");
            while (resultat.next()) {
                var nom = resultat.getArray("nom");
                System.out.println(nom);
            }
            resultat.close();
            nomOrdre.close();
            connexion.close();
        } catch (SQLException ex) {
            System.out.println("Impossible de se connecter a la base");
            System.exit(0);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public Statement connect() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connexion = DriverManager.getConnection("jdbc:mysql://" + this.panelConnexion.getBDHost() + "/" + this.panelConnexion.getBDDBName(), this.panelConnexion.getBDUser(), this.panelConnexion.getBDPWD());
            return connexion.createStatement();
        } catch (CommunicationsException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Probleme de connexion à la base de donnee");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    public PreparedStatement connectPrepared(String sql) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connexion = DriverManager.getConnection("jdbc:mysql://" + this.panelConnexion.getBDHost() + "/" + this.panelConnexion.getBDDBName(), this.panelConnexion.getBDUser(), this.panelConnexion.getBDPWD());
            return connexion.prepareStatement(sql);
        } catch (CommunicationsException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Probleme de connexion à la base de donnee");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private void bannir(String idUtilisateur) {
        Statement nomOrdre = connect();
        try {
            nomOrdre.executeUpdate("UPDATE Utilisateur SET statutBan = " + true + " WHERE idUtilisateur = " + idUtilisateur);
        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void debannir(String idUtilisateur) {
        Statement nomOrdre = connect();
        try {
            nomOrdre.executeUpdate("UPDATE Utilisateur SET statutBan = " + false + " WHERE idUtilisateur = " + idUtilisateur);
        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean estBan(String idUtilisateur) {
        boolean statutBan = false;
        try {

            Statement nomOrdre = connect();
            ResultSet resultat = nomOrdre.executeQuery("SELECT statutBan FROM Utilisateur WHERE idUtilisateur = " + idUtilisateur);

            while (resultat.next()) {
                statutBan = resultat.getBoolean("statutBan");
            }

        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return statutBan;
    }

    private void checkBan(String idUtilisateur) {
        if (estBan(idUtilisateur)) {
            BBan.setText("Debannir");
        } else {
            BBan.setText("Bannir");
        }
    }

    private boolean estValide(String idPlat) {
        boolean ajoutee = false;
        try {

            Statement nomOrdre = connect();
            ResultSet resultat = nomOrdre.executeQuery("SELECT Ajoutee FROM Plat WHERE idUtilisateur = " + idPlat);

            while (resultat.next()) {
                ajoutee = resultat.getBoolean("Ajoutee");
            }

        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ajoutee;
    }

    private void supprimerPlat(String idPlat) {
        try {

            Statement nomOrdre = connect();
            nomOrdre.executeUpdate("DELETE FROM Plat WHERE IdPlat = '" + idPlat + "'");

        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void supprimerEvent(String idEvent) {
        try {

            Statement nomOrdre = connect();
            nomOrdre.executeUpdate("DELETE FROM Evenement WHERE idEvent = '" + idEvent + "'");

        } catch (SQLException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

   
    /*private void deleteFile(String nomFichier) {
        File myObj = new File(nomFichier);
        System.out.println(myObj.getPath());
        /*if (myObj.delete()) {
            System.out.println("Deleted the file: " + myObj.getName());
        } else {
            System.out.println("Failed to delete the file.");
        }
    }*/

}
