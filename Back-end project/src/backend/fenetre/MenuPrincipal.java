/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package backend.fenetre;

import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import static javax.swing.JOptionPane.showMessageDialog;

/**
 *
 * @author Aro
 */
public class MenuPrincipal extends javax.swing.JFrame {

    // Accès base de données
    /**
     * Variable correspondant à l'adresse de la base de donnée
     */
    private String BDHost;
    /**
     * Variable correspondant au nom de la base de donnée
     */
    private String BDDBName;
    /**
     * Variable correspondant au nom d'utilisateur
     */
    private String BDUser;
    /**
     * Variable correspondant au mot de passe
     */
    private String BDPWD;
    /**
     *
     */
    private FrameConnexion frameConnexion;

    /**
     * Creates new form Main
     */
    public MenuPrincipal() {
        initComponents();
        initComponentPerso();
    }

    public String getBDHost() {
        return BDHost;
    }

    public void setBDHost(String BDHost) {
        this.BDHost = BDHost;
    }

    public String getBDDBName() {
        return BDDBName;
    }

    public void setBDDBName(String BDDBName) {
        this.BDDBName = BDDBName;
    }

    public String getBDUser() {
        return BDUser;
    }

    public void setBDUser(String BDUser) {
        this.BDUser = BDUser;
    }

    public String getBDPWD() {
        return BDPWD;
    }

    public void setBDPWD(String BDPWD) {
        this.BDPWD = BDPWD;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        SPData = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Table :");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(183, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(SPData, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        jMenuItem1.setText("Fermer");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Connexion");

        jMenuItem2.setText("Configurer la connexion");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("jMenuItem3");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        frameConnexion.setVisible(true);
        System.out.println(BDUser);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.out.println(BDUser);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MenuPrincipal mp = new MenuPrincipal();
                //mp.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane SPData;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void initComponentPerso() {
        frameConnexion = new FrameConnexion(this);
        String data[][] = {{"Name1", "FirstName1", "Age1"}, {"Name2", "FirstName2", "Age2"}, {"Name3", "FirstName3", "Age3"}};
        String test = "test";
        String columnNames[] = {"Name", "FirstName", "Age"};
        JTable j;
        j = new JTable(data, columnNames);
        SPData.add(j);
        JScrollPane sp = new JScrollPane(j);
        this.add(sp);
        j.setBounds(30, 40, 200, 300);
        requeteBD("");
    }

    /**
     *
     * @param sql
     */
    public void requeteLocalhost(String sql) {
        // TODO code application logic here
        try {
            // TODO code application logic here
            Class.forName("com.mysql.jdbc.Driver");
            Connection connexion = DriverManager.getConnection("jdbc:mysql://" + this.BDHost + "/" + this.BDDBName, this.BDUser, this.BDPWD);
            //Connection connexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/sae", "root", "");
            //Connection connexion = DriverManager.getConnection("jdbc:mysql://mysql-trouvetonplat.alwaysdata.net/trouvetonplat_bd", "289080", "trouveton784512");
            Statement nomOrdre = connexion.createStatement();
            ResultSet resultat = nomOrdre.executeQuery("SELECT nom FROM Plat");
            while (resultat.next()) {
                var nom = resultat.getArray("nom");
                System.out.println(nom);
            }
            resultat.close();
            nomOrdre.close();
            connexion.close();
        } catch (SQLException ex) {
            System.out.println("Impossible de se connecter a la base");
            System.exit(0);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void requeteBD(String sql) {
        // TODO code application logic here
        try {
            // TODO code application logic here
            int rowCount = 0;
            System.out.println("asadasda");
            Class.forName("com.mysql.jdbc.Driver");
            Connection connexion = DriverManager.getConnection("jdbc:mysql://" + this.BDHost + "/" + this.BDDBName, this.BDUser, this.BDPWD);
            Statement nomOrdre = connexion.createStatement();
            ResultSet resultat = nomOrdre.executeQuery("SELECT * FROM Plat");
            ResultSetMetaData resultatMD = (ResultSetMetaData) resultat.getMetaData();
            resultatMD.getColumnCount();
            if (resultat.last()) {
                rowCount = resultat.getRow();
                resultat.beforeFirst();
            }
            /*String columnNames[] = new String[resultatMD.getColumnCount()];
            for(int i = 0; i < resultatMD.getColumnCount(); i++){
                columnNames[i] = resultatMD.getColumnName(i);
            }
            int[][] name = new int[resultatMD.getColumnCount()][rowCount];*/
            while (resultat.next()) {
                String nom = resultat.getString("idPlat");
                System.out.println(nom);
            }
            resultat.close();
            nomOrdre.close();
            connexion.close();
        } catch (SQLException ex) {
            showMessageDialog(null, "Impossible de se connecter a la base, "
                    + "vérifiez votre connexion internet et la configuration "
                    + "de la connexion à la base de donnée");
            System.out.println("Impossible de se connecter a la base, "
                    + "vérifiez votre connexion internet et la configuration "
                    + "de la connexion à la base de donnée");
            System.exit(0);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
